// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @map("user_id") @db.ObjectId
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique @map("session_token")
  userId       String   @map("user_id") @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id                 String        @id @default(auto()) @map("_id") @db.ObjectId
  name               String?
  password           String?
  status             Boolean       @default(false)
  email              String        @unique
  emailVerified      DateTime?     @map("email_verified")
  image              String?
  isTwoFactorEnabled Boolean       @default(false)
  // twofactorConfirmation  TODO
  accounts           Account[]
  sessions           Session[]
  Friend             User_Friend[] @relation("friend")
  User               User_Friend[] @relation("user")
  user_group         user_group[]
  Message            Message[]
  Request            Request[]

  @@map("users")
}

enum friendStatus {
  FRIEND
  MUTED
  BLOCKED
}

model User_Friend {
  id       String       @id @default(auto()) @map("_id") @db.ObjectId
  user     User         @relation("user", fields: [userId], references: [id])
  userId   String       @db.ObjectId
  friend   User         @relation("friend", fields: [friendId], references: [id])
  friendId String       @db.ObjectId
  status   friendStatus

  @@unique([userId, friendId])
}

model Group {
  id         String       @id @default(auto()) @map("_id") @db.ObjectId
  group_name String
  user_group user_group[]
  Message    Message[]
  Request    Request[]
}

enum groupRole {
  ADMIN
  MEMBER
}

model user_group {
  id      String    @id @default(auto()) @map("_id") @db.ObjectId
  user    User      @relation(fields: [userId], references: [id])
  group   Group     @relation(fields: [groupId], references: [id])
  userId  String    @db.ObjectId
  groupId String    @db.ObjectId
  role    groupRole
  joined  DateTime

  @@unique([userId, groupId])
}

model Message {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  message    String
  group      Group?   @relation(fields: [groupId], references: [id])
  receiver   User?    @relation(fields: [receiverId], references: [id])
  sent       DateTime @default(now())
  groupId    String?  @db.ObjectId
  receiverId String?  @db.ObjectId
}

enum requestStatus {
  PENDING
  ACCEPTED
  REJECTED
}

model Request {
  id         String        @id @default(auto()) @map("_id") @db.ObjectId
  group      Group?        @relation(fields: [groupId], references: [id])
  receiver   User          @relation(fields: [receiverId], references: [id])
  groupId    String?       @db.ObjectId
  receiverId String        @db.ObjectId
  message    String?
  sent       DateTime      @default(now())
  status     requestStatus
}

// model Request{
//     id       String        @id @default(auto()) @map("_id") @db.ObjectId
//     group_id 

// }

model VerificationToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("verificationtokens")
}

model PasswordToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("passwordtokens")
}

model twofactorToken {
  id String @id @default(auto()) @map("_id") @db.ObjectId

  email   String
  token   String   @unique
  expires DateTime

  @@unique([email, token])
  @@map("twofactortokens")
}
